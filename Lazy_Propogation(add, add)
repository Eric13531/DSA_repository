//Addition on segments + range sum query
#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define MAXN (int)2e5+10

ll A[4*MAXN] = {};
ll lazy[4*MAXN] = {};
ll num[MAXN] = {};
ll M, N, Q;

void push(int v, int l, int r){
    int m = (l+r)/2;
    if(l!=r){
        A[v*2] += lazy[v] * (m-l+1);
        lazy[v*2] += lazy[v];
        A[v*2+1] += lazy[v] * (r-(m+1)+1);
        lazy[v*2+1] += lazy[v];
    }
    lazy[v]=0;
}

void build(int v, int l, int r){
    if(l == r) A[v] = num[l];
    else{
        int m = (l+r)/2;
        build(v*2, l, m);
        build(v*2+1, m+1, r);
        A[v] = A[v*2] + A[v*2+1];
    }
}

void update(int v, int l, int r, int tl, int tr, ll val){
    if(tl>tr) return;
    else if(l>=tl && r <= tr){
        push(v,l,r);
        A[v]+=val*(r-l+1);
        lazy[v] += val;
    }
    else{
        push(v,l,r);
        int m = (l+r)/2;
        update(v*2,l,m,tl,min(m,tr),val);
        update(v*2+1,m+1,r,max(tl,m+1),tr,val);
        A[v] = A[v*2] + A[v*2+1];
    }
}


ll query(int v, int l, int r, int tl, int tr){
    if (tl>tr) return 0;
    if(l>=tl && r <= tr){
        push(v,l,r);
        return A[v];
    }
    push(v,l,r);
    int m = (l+r)/2;
    return (query(v*2, l, m, tl, min(tr,m)) + query(v*2+1,m+1,r,max(tl,m+1), tr));
}

int main() {
    cin.sync_with_stdio(0);
    cin.tie(0);

    cin>>M>>N>>Q;
    for(int i = 1; i<=N; i++){
        cin>>num[i];
    }

    build(1,1,N);
    for(int i = 0; i<Q; i++){
        int id; cin>>id;
        if(id==1){
            int l,r,x; cin>>l>>r>>x;
            update(1,1,N,l,r,x);
        }
        if(id==2){
            int l,r; cin>>l>>r;
            cout<<query(1,1,N,l,r)<<"\n";
        }
    }
    return 0;
}
